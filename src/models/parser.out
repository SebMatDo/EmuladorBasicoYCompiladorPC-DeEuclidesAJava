Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASSIGN
    CASO
    COMMA
    DEV
    DIVIDE
    ENTONCES
    EQUAL
    FALSO
    FFUN
    FMIENTRAS
    FUN
    GEQ
    GREATER
    HACER
    LEQ
    LESS
    LPAREN
    MIENTRAS
    MINUS
    MOD
    NOTEQ
    NUMBER
    O
    PARAMS
    PLUS
    RPAREN
    SI
    SINO
    TIMES
    VERDADERO
    Y

Grammar

Rule 0     S' -> type_assignment
Rule 1     type_assignment -> VAR ID COLON type SEMICOLON
Rule 2     type -> ENTERO
Rule 3     type -> BOOLEANO
Rule 4     type -> DECIMAL
Rule 5     type -> CADENA
Rule 6     type -> ARREGLO

Terminals, with rules where they appear

ARREGLO              : 6
ASSIGN               : 
BOOLEANO             : 3
CADENA               : 5
CASO                 : 
COLON                : 1
COMMA                : 
DECIMAL              : 4
DEV                  : 
DIVIDE               : 
ENTERO               : 2
ENTONCES             : 
EQUAL                : 
FALSO                : 
FFUN                 : 
FMIENTRAS            : 
FUN                  : 
GEQ                  : 
GREATER              : 
HACER                : 
ID                   : 1
LEQ                  : 
LESS                 : 
LPAREN               : 
MIENTRAS             : 
MINUS                : 
MOD                  : 
NOTEQ                : 
NUMBER               : 
O                    : 
PARAMS               : 
PLUS                 : 
RPAREN               : 
SEMICOLON            : 1
SI                   : 
SINO                 : 
TIMES                : 
VAR                  : 1
VERDADERO            : 
Y                    : 
error                : 

Nonterminals, with rules where they appear

type                 : 1
type_assignment      : 0

Parsing method: LALR

state 0

    (0) S' -> . type_assignment
    (1) type_assignment -> . VAR ID COLON type SEMICOLON

    VAR             shift and go to state 2

    type_assignment                shift and go to state 1

state 1

    (0) S' -> type_assignment .



state 2

    (1) type_assignment -> VAR . ID COLON type SEMICOLON

    ID              shift and go to state 3


state 3

    (1) type_assignment -> VAR ID . COLON type SEMICOLON

    COLON           shift and go to state 4


state 4

    (1) type_assignment -> VAR ID COLON . type SEMICOLON
    (2) type -> . ENTERO
    (3) type -> . BOOLEANO
    (4) type -> . DECIMAL
    (5) type -> . CADENA
    (6) type -> . ARREGLO

    ENTERO          shift and go to state 6
    BOOLEANO        shift and go to state 7
    DECIMAL         shift and go to state 8
    CADENA          shift and go to state 9
    ARREGLO         shift and go to state 10

    type                           shift and go to state 5

state 5

    (1) type_assignment -> VAR ID COLON type . SEMICOLON

    SEMICOLON       shift and go to state 11


state 6

    (2) type -> ENTERO .

    SEMICOLON       reduce using rule 2 (type -> ENTERO .)


state 7

    (3) type -> BOOLEANO .

    SEMICOLON       reduce using rule 3 (type -> BOOLEANO .)


state 8

    (4) type -> DECIMAL .

    SEMICOLON       reduce using rule 4 (type -> DECIMAL .)


state 9

    (5) type -> CADENA .

    SEMICOLON       reduce using rule 5 (type -> CADENA .)


state 10

    (6) type -> ARREGLO .

    SEMICOLON       reduce using rule 6 (type -> ARREGLO .)


state 11

    (1) type_assignment -> VAR ID COLON type SEMICOLON .

    $end            reduce using rule 1 (type_assignment -> VAR ID COLON type SEMICOLON .)

